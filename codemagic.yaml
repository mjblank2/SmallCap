# codemagic.yaml
workflows:
  release-workflow:
    name: iOS Build, Screenshots, and TestFlight Deployment
    instance_type: mac_mini_m1
    environment:
      # CRITICAL: Configure these securely in the Codemagic Dashboard Environment Groups.
      groups:
        - app_store_connect
        - general # Ensure BUNDLE_ID is set here
      # Signing assets are fetched dynamically via the App Store Connect API,
      # so no additional "certificates" variable group is required.
      vars:
        # Update these to match your actual Xcode project names
        XCODE_WORKSPACE: "ios/MicroCapDaily.xcworkspace"
        XCODE_SCHEME: "MicroCapDaily"
        UITEST_SCHEME: "MicroCapDailyUITests"
      # Specify a supported Ruby version for Fastlane stability
      ruby: 3.2.4
      xcode: latest

    triggering:
      events:
        - push
      branch_patterns:
        - pattern: 'main'
          include: true

    scripts:
      # --- Setup and Signing ---
      - name: Initialize Keychain
        script: keychain initialize

      - name: Normalize App Store Connect private key
        script: |
          python3 <<'PY'
          import base64
          import os
          import pathlib
          import sys

          cm_env = pathlib.Path(os.environ["CM_ENV"])
          build_dir = pathlib.Path(os.environ.get("CM_BUILD_DIR", "."))
          raw_key = os.environ.get("APP_STORE_CONNECT_PRIVATE_KEY") or os.environ.get("APP_STORE_CONNECT_PRI")

          if not raw_key:
              sys.stderr.write("Missing App Store Connect private key. Ensure APP_STORE_CONNECT_PRIVATE_KEY is set.\n")
              sys.exit(1)

          try:
              decoded = base64.b64decode(raw_key)
              if b"-----BEGIN" in decoded:
                  key_text = decoded.decode("utf-8")
              else:
                  raise ValueError
          except Exception:
              key_text = raw_key

          # Replace literal '\n' sequences that are commonly used when storing
          # the key in environment variables. Without this normalization the
          # resulting file would contain the two-character sequence '\\n',
          # which is not a valid PEM-encoded key and causes Codemagic's
          # `app-store-connect` CLI to fail with:
          #   "Provided value is not a valid PEM encoded private key".
          key_text = key_text.replace("\\n", "\n").strip()

          key_path = build_dir / "tmp" / "app_store_connect_key.p8"
          key_path.parent.mkdir(parents=True, exist_ok=True)
          key_path.write_text(key_text)

          with cm_env.open("a") as env_file:
              env_file.write(f"export APP_STORE_CONNECT_PRIVATE_KEY_PATH={key_path}\n")
              env_file.write("export APP_STORE_CONNECT_PRIVATE_KEY<<'EOF'\n")
              env_file.write(key_text)
              env_file.write("\nEOF\n")
          PY

      - name: Fetch signing files
        script: |
          app-store-connect fetch-signing-files $BUNDLE_ID \
            --type IOS_APP_STORE \
            --create \
            --key-id "$ASC_KEY_ID" \
            --issuer-id "$ASC_ISSUER_ID" \
            --private-key-path "$APP_STORE_CONNECT_PRIVATE_KEY_PATH"

      - name: Add certificates to Keychain
        script: keychain add-certificates

      - name: Install Dependencies (SPM)
        script: xcode-project use-spm

      # --- Automated Screenshot Generation (Fastlane Snapshot) ---
      - name: Install Fastlane (via Bundler)
        script: |
          # Navigate to the directory containing the Gemfile
          cd ios
          gem install bundler
          bundle install

      - name: Generate App Store Screenshots
        script: |
          cd ios
          # Runs XCUITests defined in the project and captures screenshots
          bundle exec fastlane snapshot --scheme $UITEST_SCHEME
        # Continue build even if screenshots fail (optional)
        ignore_failure: true

      # --- Build the App ---
      - name: Build the app for App Store
        script: |
          xcode-project build-ipa \
            --workspace $XCODE_WORKSPACE \
            --scheme $XCODE_SCHEME
            
    artifacts:
      - build/ios/ipa/*.ipa
      # Collect the generated screenshots
      - ios/fastlane/screenshots/**/*.png

    publishing:
      app_store_connect:
        api_key: $APP_STORE_CONNECT_PRIVATE_KEY
        key_id: $ASC_KEY_ID
        issuer_id: $ASC_ISSUER_ID
        submit_to_testflight: true
    

